/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as LayoutImport } from './routes/_layout';
import { Route as LayoutSlugImport } from './routes/_layout.$slug';
import { Route as LayoutSlugEditImport } from './routes/_layout.$slug_.edit';
import { Route as LayoutIndexImport } from './routes/_layout.index';
import { Route as LayoutNewImport } from './routes/_layout.new';
import { Route as RegisterImport } from './routes/register';
import { Route as SigninImport } from './routes/signin';

// Create/Update Routes

const SigninRoute = SigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any);

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any);

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any);

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any);

const LayoutNewRoute = LayoutNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => LayoutRoute,
} as any);

const LayoutSlugRoute = LayoutSlugImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => LayoutRoute,
} as any);

const LayoutSlugEditRoute = LayoutSlugEditImport.update({
  id: '/$slug_/edit',
  path: '/$slug/edit',
  getParentRoute: () => LayoutRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof LayoutImport;
      parentRoute: typeof rootRoute;
    };
    '/register': {
      id: '/register';
      path: '/register';
      fullPath: '/register';
      preLoaderRoute: typeof RegisterImport;
      parentRoute: typeof rootRoute;
    };
    '/signin': {
      id: '/signin';
      path: '/signin';
      fullPath: '/signin';
      preLoaderRoute: typeof SigninImport;
      parentRoute: typeof rootRoute;
    };
    '/_layout/$slug': {
      id: '/_layout/$slug';
      path: '/$slug';
      fullPath: '/$slug';
      preLoaderRoute: typeof LayoutSlugImport;
      parentRoute: typeof LayoutImport;
    };
    '/_layout/new': {
      id: '/_layout/new';
      path: '/new';
      fullPath: '/new';
      preLoaderRoute: typeof LayoutNewImport;
      parentRoute: typeof LayoutImport;
    };
    '/_layout/': {
      id: '/_layout/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof LayoutIndexImport;
      parentRoute: typeof LayoutImport;
    };
    '/_layout/$slug_/edit': {
      id: '/_layout/$slug_/edit';
      path: '/$slug/edit';
      fullPath: '/$slug/edit';
      preLoaderRoute: typeof LayoutSlugEditImport;
      parentRoute: typeof LayoutImport;
    };
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutSlugRoute: typeof LayoutSlugRoute;
  LayoutNewRoute: typeof LayoutNewRoute;
  LayoutIndexRoute: typeof LayoutIndexRoute;
  LayoutSlugEditRoute: typeof LayoutSlugEditRoute;
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutSlugRoute: LayoutSlugRoute,
  LayoutNewRoute: LayoutNewRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutSlugEditRoute: LayoutSlugEditRoute,
};

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren);

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren;
  '/register': typeof RegisterRoute;
  '/signin': typeof SigninRoute;
  '/$slug': typeof LayoutSlugRoute;
  '/new': typeof LayoutNewRoute;
  '/': typeof LayoutIndexRoute;
  '/$slug/edit': typeof LayoutSlugEditRoute;
}

export interface FileRoutesByTo {
  '/register': typeof RegisterRoute;
  '/signin': typeof SigninRoute;
  '/$slug': typeof LayoutSlugRoute;
  '/new': typeof LayoutNewRoute;
  '/': typeof LayoutIndexRoute;
  '/$slug/edit': typeof LayoutSlugEditRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/_layout': typeof LayoutRouteWithChildren;
  '/register': typeof RegisterRoute;
  '/signin': typeof SigninRoute;
  '/_layout/$slug': typeof LayoutSlugRoute;
  '/_layout/new': typeof LayoutNewRoute;
  '/_layout/': typeof LayoutIndexRoute;
  '/_layout/$slug_/edit': typeof LayoutSlugEditRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | ''
    | '/register'
    | '/signin'
    | '/$slug'
    | '/new'
    | '/'
    | '/$slug/edit';
  fileRoutesByTo: FileRoutesByTo;
  to: '/register' | '/signin' | '/$slug' | '/new' | '/' | '/$slug/edit';
  id:
    | '__root__'
    | '/_layout'
    | '/register'
    | '/signin'
    | '/_layout/$slug'
    | '/_layout/new'
    | '/_layout/'
    | '/_layout/$slug_/edit';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren;
  RegisterRoute: typeof RegisterRoute;
  SigninRoute: typeof SigninRoute;
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  RegisterRoute: RegisterRoute,
  SigninRoute: SigninRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/register",
        "/signin"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/$slug",
        "/_layout/new",
        "/_layout/",
        "/_layout/$slug_/edit"
      ]
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/_layout/$slug": {
      "filePath": "_layout.$slug.tsx",
      "parent": "/_layout"
    },
    "/_layout/new": {
      "filePath": "_layout.new.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout.index.tsx",
      "parent": "/_layout"
    },
    "/_layout/$slug_/edit": {
      "filePath": "_layout.$slug_.edit.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
